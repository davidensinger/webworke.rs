// ==========================================================================
//
//  Images
//
// ==========================================================================


img {
  border: 0; // Removes border when inside 'a' element in IE6/7/8/9, FF3
  max-width: 100%;
  width: auto;
  vertical-align: middle;
}

// Images in figure elements.
figure > img {
  display: block;
}

// Addresses margin not present in IE6/7/8/9, S5, O11
figure {
  margin: 0;
}

// Corrects overflow displayed oddly in IE9
svg:not(:root) {
  overflow: hidden;
}

// center picture elements in the event they’re not as wide as their container
picture {
  text-align: center;
}


// -------------------------------------
//  Media width variations
// -------------------------------------

// percentage width variations
.media--1-4 {
  width: 25%;
}

.media--1-3 {
  width: 33.333%;
}

.media--1-2 {
  width: 50%;
}

.media--3-4 {
  width: 75%;
}

.media--1-4,
.media--1-3,
.media--1-2,
.media--3-4 {

  // start breakpoints
  @include breakpoint(mobile-portrait-to-mobile-landscape) {
    width: 100%;
  }
}

// min-width variations
$min-widths--list: 100, 150, 200, 250, 300, 350, 400, 450, 500;
@each $min-width in $min-widths--list {
  .media--min-#{$min-width} {
    min-width: #{$min-width}px;
  }
}


// -------------------------------------
//  Media placement variations
// -------------------------------------

.media--right {
  float: right;
  margin: #{$quarter-spacing-unit}rem 0 #{$base-spacing-unit}rem #{$base-spacing-unit}rem;
}

.media--left {
  float: left;
  margin: #{$quarter-spacing-unit}rem #{$base-spacing-unit}rem #{$base-spacing-unit}rem 0;
}

// Remove float and center image on small mobile
.media--right,
.media--left {

  // start breakpoints
  @include breakpoint(mobile-portrait-to-mobile-landscape) {
    display: block;
    float: none;
    margin: 0 auto #{$base-spacing-unit}rem;
  }
}

.media--center {
  display: block;
  margin: 0 auto #{$base-spacing-unit}rem;
}


// -------------------------------------
//  Media link
// -------------------------------------

.media-image--link {
  display: block;

  img {
    border-width: 1px;
    border-style: solid;
    border-color: transparent;
    transition: border-color 0.3s;
  }

  &:hover {

    img {
      border-color: $black-light;
    }
  }

  &:focus {

    img {
      border-color: $focus;
    }
  }
}

.media-caption {
  @extend %font-industry--medium;
  @extend %small;
  margin-top: #{$quarter-spacing-unit}rem;
}

.media-link {
  @extend %citation-small--link;
}


// -------------------------------------
//  Image with caption
// -------------------------------------

.imageCaption-image {
  display: block;
  margin: #{$quarter-spacing-unit}rem 0;
}

.imageCaption-figcaption {
  @extend %small;
  @extend %font-industry--medium;
}

.imageCaption-link {
  @extend %citation-small--link;
}


// -------------------------------------
//  Flex Embed
//  https://github.com/suitcss/components-flex-embed
// -------------------------------------

// For use with media embeds – such as videos, slideshows, or even images –
// that need to retain a specific aspect ratio but adapt to the width of their
// containing element.
//
// Example HTML:
//
// <div class="FlexEmbed">
//   <div class="FlexEmbed-ratio FlexEmbed-ratio--16by9"></div>
//   <div class="FlexEmbed-content">
//     <!-- child content -->
//   </div>
// </div>

.FlexEmbed {
  display: block;
  overflow: hidden;
  position: relative;
}

// The aspect-ratio hack is applied to an empty element because it allows
// the component to respect `max-height`. Default aspect ratio is 1:1.
.FlexEmbed-ratio {
  display: block;
  padding-bottom: 100%;
  width: 100%;

  // Update as of 02/28/2015 I am chaining the modifier classes to increase their specificity
  // to trump the inline critical CSS.

  // Modifier: 3:1 aspect ratio
  &.FlexEmbed-ratio--3by1 {
    padding-bottom: calc(100% / 3);
  }

  // Modifier: 2:1 aspect ratio
  &.FlexEmbed-ratio--2by1 {
    padding-bottom: 50%;
  }

  // Modifier: 16:9 aspect ratio
  &.FlexEmbed-ratio--16by9 {
    padding-bottom: 56.25%;
  }

  // Modifier: 4:3 aspect ratio
  &.FlexEmbed-ratio--4by3 {
    padding-bottom: 75%;
  }
}

// Fit the content to the aspect ratio
.FlexEmbed-content {
  @include absolute(top 0 bottom 0 left 0);
  width: 100%;
  height: 100%;
}
